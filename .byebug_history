c
ENV["AUTH0_CLIENT_SECRET"]
ENV
ENV[AUTH0_CLIENT_SECRET]
Rails.application.secrets.auth0_client_secret
Rails.application.secrets.secret_key_base
continue
@physicians
continue
instance_variable_get("@physicians")
name
results
continue
next
by
continue
Client.all
@clients
next
continue
by
continue
filters[by.to_sym].call(current_user).paginate(page: params[:page], per_page: params[:per_page]).count
filters[by.to_sym].call(current_user).paginate(page: params[:page], per_page: params[:per_page])
filters[by.to_sym].call(current_user)
current_user
filters[by.to_sym]
display by
by
c
@physicians
next
continue
filters[filter_by.to_sym].call(location_id, speciality_id).paginate(page: params[:page], per_page: params[:per_page]) unless params[:filters].try(:[], :liason_id).try(:present?)
filters[filter_by.to_sym].call(location_id, speciality_id).paginate(page: params[:page], per_page: params[:per_page]) unless params[:filters][:liason_id].present?
filters[filter_by.to_sym].call(location_id, speciality_id).paginate(page: params[:page], per_page: params[:per_page])
filters[filter_by.to_sym]filters[filter_by.to_sym].call(location_id, speciality_id).paginate(page: params[:page], per_page: params[:per_page])
filters[filter_by.to_sym]
next
display filter_by
next
display filter_by
display liason_id
display speciality_id
display location_id
next
c
next
filter_by
next
continue
params[:filters].try(:[], :location_id)
c
params[:filters].try(:[])
params[:filters].try(:[], :location_id)
continue
location_id ||= params[:filters][:location_id]
continue
params[:filters]
params[:filters][:location_id]
continue
c
current_user_from_token
current_user
by
c
Liason.assigned_physicians(liason_id)
filters[filter_by.to_sym].call(location_id, speciality_id)
c
continue
Liason.find(liason_id).physicians
Liason.find(liason_id)
c
Liason.assigned_physicians(liason_id)
Liason
@physicians
c
continue
physician.speciality
physician
continue
e.message
n
c
next
physician.speciality.name
physician.speciality
physician
c
policy && action && allowed
if policy && action && allowed
next
acls
next
allowed
next
acls
next
c
continue
exception.message
next
acls
next
acls
c
continue
acls.each{|e| p e}
acls.each do {|e| p e}
acls
next
display action
display policy
d policy
display allowed
next
@user.roles.collect{|role| role.acls.detect{|acl| "#{acl.resource.name.capitalize}Policy" == self.class.name } }
c
acls = @user.roles.collect{|role| role.acls.detect{|acl| "#{acl.resource.name.capitalize}Policy" == self.class.name } }
@user.roles.collect{|role| role.acls.detect{|acl| "#{acl.resource.name.capitalize}Policy" == self.class.name } }
continue
c
continue
acl
c
continue
next
c
self.class.name
continue
next
display acl
continue
LiasonPolicy.instance_methods.grep(/index?/)
"#{policy.capitalize}Policy".constantize.send(:define_method, "#{action}?", ->{ allowed })
action
policy
c
continue
next
allowed
next
action
next
policy
next
c
exception.message
next
acl.allowed
next
allowed
next
allowed || acl.allowed
allowed
acls.count
acl
continue
next
continue
exception.message
next
display allowed
step
next
acls
next
c
Acl.all.select{|acl| acl.resource.name.capitalize == record.name}.collect(&:role)
Acl.all.select{|acl| acl.resource.name.capitalize == record.name}
Acl.all.select{|acl| acl.resource.name.capitalize == record.name}.count
Acl.all.select{|acl| acl.resource.name.capitalize == record.name}
Acl.all.detect{|acl| acl.resource.name.capitalize == record.name}
Acl.detect{|acl| acl.resource.name.capitalize == record.name}
acl.role
acl
continue
acl
acl.role
acl.roles
continue
acl
c
"#{acl.resource.name.capitalize}Policy"
c
@user.role.acls.detect{|acl| acl.resource.name.capitalize == record.name}
@user.role.acls
@user.role
@user
acl
c
 acl
"#{acl.resource.name.capitalize}Policy"
c
continue
Speciality.instance_methods.grep(/index?/)
Speciality.instance_methods
"speciality".capitalize.constantize.send(:define_method, "index?", ->{acl.allowed})
display acl.resource.name
c
acl.resource.name
c
cotninue
acl.resource.name.capitalize.constantize
acl.resource.name.constantize
acl.resource.name
c
continue
@record
c
display acl.resource.action
c
continue
acl
continue
@user.role.acls
continue
record
next
c
continue
next
acl.resource.name.capitalize
next
c
continue
c
acl.resource.name.capitalize
acl.resource.name
acl.resource
acl
next
c
@user.role.acls.detect{|acl| acl.resource.name == record.name}
@user.role.acls
@user.role.acls.detect{|acl| acl.name == record.name}
@user.role.acls
record.name
record
continue
roles
acl.allowed
continue
next
continue
exception.message
next
step
role.acls
role
c
role.acls
continue
next
step
display role
