c
exception.message
next
step
user.roles
continue
exception.message
next
step
c
exception.message
next
user.roles
user
continue
user.roles
user.respond_to?(:roles)
user
continue
user.roles
user.respond_to?(:roles)
user
(User)user
User
User(user)
c
exception.message
next
user.roles
user
user.roles
continue
user.role
user
continue
User.last(2).first.roles
User.last
User.roles
user
c
Liason.assigned_physicians(liason_id)
filters[filter_by.to_sym].call(location_id, speciality_id)
c
continue
Liason.find(liason_id).physicians
Liason.find(liason_id)
c
Liason.assigned_physicians(liason_id)
Liason
@physicians
c
continue
physician.speciality
physician
continue
e.message
n
c
next
physician.speciality.name
physician.speciality
physician
c
policy && action && allowed
if policy && action && allowed
next
acls
next
allowed
next
acls
next
c
continue
exception.message
next
acls
next
acls
c
continue
acls.each{|e| p e}
acls.each do {|e| p e}
acls
next
display action
display policy
d policy
display allowed
next
@user.roles.collect{|role| role.acls.detect{|acl| "#{acl.resource.name.capitalize}Policy" == self.class.name } }
c
acls = @user.roles.collect{|role| role.acls.detect{|acl| "#{acl.resource.name.capitalize}Policy" == self.class.name } }
@user.roles.collect{|role| role.acls.detect{|acl| "#{acl.resource.name.capitalize}Policy" == self.class.name } }
continue
c
continue
acl
c
continue
next
c
self.class.name
continue
next
display acl
continue
LiasonPolicy.instance_methods.grep(/index?/)
"#{policy.capitalize}Policy".constantize.send(:define_method, "#{action}?", ->{ allowed })
action
policy
c
continue
next
allowed
next
action
next
policy
next
c
exception.message
next
acl.allowed
next
allowed
next
allowed || acl.allowed
allowed
acls.count
acl
continue
next
continue
exception.message
next
display allowed
step
next
acls
next
c
Acl.all.select{|acl| acl.resource.name.capitalize == record.name}.collect(&:role)
Acl.all.select{|acl| acl.resource.name.capitalize == record.name}
Acl.all.select{|acl| acl.resource.name.capitalize == record.name}.count
Acl.all.select{|acl| acl.resource.name.capitalize == record.name}
Acl.all.detect{|acl| acl.resource.name.capitalize == record.name}
Acl.detect{|acl| acl.resource.name.capitalize == record.name}
acl.role
acl
continue
acl
acl.role
acl.roles
continue
acl
c
"#{acl.resource.name.capitalize}Policy"
c
@user.role.acls.detect{|acl| acl.resource.name.capitalize == record.name}
@user.role.acls
@user.role
@user
acl
c
 acl
"#{acl.resource.name.capitalize}Policy"
c
continue
Speciality.instance_methods.grep(/index?/)
Speciality.instance_methods
"speciality".capitalize.constantize.send(:define_method, "index?", ->{acl.allowed})
display acl.resource.name
c
acl.resource.name
c
cotninue
acl.resource.name.capitalize.constantize
acl.resource.name.constantize
acl.resource.name
c
continue
@record
c
display acl.resource.action
c
continue
acl
continue
@user.role.acls
continue
record
next
c
continue
next
acl.resource.name.capitalize
next
c
continue
c
acl.resource.name.capitalize
acl.resource.name
acl.resource
acl
next
c
@user.role.acls.detect{|acl| acl.resource.name == record.name}
@user.role.acls
@user.role.acls.detect{|acl| acl.name == record.name}
@user.role.acls
record.name
record
continue
roles
acl.allowed
continue
next
continue
exception.message
next
step
role.acls
role
c
role.acls
continue
next
step
display role
role
step
next
continue
next
display roles
continue
exception.message
next
continue
exception.message
next
continue
exception.message
next
display record
next
record
c
continue
next
rls
next
self.role.name
rls
continue
