continue
json.partial! "specialities/speciality", speciality: physician.speciality
json.partial! "specialities/speciality/", speciality: physician.speciality
json.partial! "/specialities/speciality", speciality: physician.speciality
json.partial! "specialities/speciality", speciality: physician.speciality
json.partial! partial: 'speciality', speciality: physician.speciality
json.partial! partial: 'specialities/speciality', speciality: physician.speciality
continue
speciality_ids
continue
speciality_ids
speciality_id
continue
next
JSON.parse(params[:filters][:speciality_id])
next
continue
speciality_ids
continue
if speciality_id =~ /^\[\]$/
if speciality_id =~ %r{\A\[\]\z}
if speciality_id.match(/\A\[\]\z/)
if speciality_id =~ /\A\[\]\z/
if speciality_id =~ /\A\[\]\z/i
if speciality_id ~= /\A\[\]\z/i
if speciality_id =~ /\A\[\]\z/i
if speciality_id =~ /\A\[\]\z/
speciality_id
continue
Physician.where(speciality_id: JSON.parse("[1,2]"))
Physician.where(speciality_id: JSON.parse(speciality_ids))
Physician.where(speciality_id: speciality_ids)
display speciality_ids
continue
speciality_ids
continue
next
continue
cotninue
continue
exception
next
continue
exception
next
continue
exception
next
instance_variable_get("@#{name}")
name
continue
puts exception.backtrace.join("\n")
exception.backtrace
exception
next
var all
var
next
physician.location
next
physician.speciality
next
continue
next
step
next
filters[params[:filters][:by].to_sym].call(location_id, speciality_id)
filters[params[:filters][:by].to_sym]
filters[params[:filters][:by].to_sym].call(location_id, speciality_id)filters[params[:filters][:by].to_sym].call(location_id, speciality_id)
next
continue
speciality_id
next
continue
JSON.parse("[1]")
JSON.parse(speciality_id)
speciality_id
continue
filters[params[:filters][:by].to_sym].call(location_id, speciality_id)
filters[params[:filters][:by].to_sym]
params[:filters][:by].to_sym
params[:filters][:by]
params
filters[params[:filters][:by].to_sym].call(location_id, speciality_id)
filters[:all]
filter[:all]
filters[params[:filters][:by]]
filters[params[:filters][:by]].call(location_id, speciality_id)
filters[params[:all].call(location_id, speciality_id)
filters[params[:filters][:by].to_sym].call(location_id, speciality_id)
filters[params[:filters][:by].to_sym].call(location_id, speciality_id).page(params[:page]).per(params[:per])
params
continue
@specialities.flatten.uniq!
@specialities.flatten
@specialities
continue
JSON.parse(request.headers["app-id"])
JSON.parse(requset.headers["app-id"])
Array(request.headers["app-id"])
request.headers["app-id"]
continue
filters[by.to_sym].call(current_user)
by
continue
filters[by.to_sym].call(current_user)
continue
filters[by.to_sym].call(current_user.id)
filters[by.to_sym]
by
continue
clients[filter.to_sym].call(current_user.id)
current_user.id
current_user
filter
continue
params[:filters][:by]
params[:filters]
continue
current_user.app_id == request.headers['app-key'].to_i
continue
current_user.app_id == request.headers['app-key'].to_i
continue
current_user.app_id
current_user.app_key
current_user
continue
request.headers['app-key']
request.headers['app-id']
continue
current_user
continue
user
next
continue
user
next
continue
current_user
continue
current_user.app_id
continue
current_user
continue
current_user
continue
heads
next
step
next
continue
b 17
b 16
next
continue
info 22
display 22
next
step
 self.tokens[client_id][:expiry]
self.tokens[client_id]['expiry']
next
token
continue
current_user
continue
current_user
continue
filters[params[:filters][:by].to_sym].call(1,1)
filters[params[:filters][:by].to_sym].call
filters[params[:filters][:by].to_sym]
filters[params[:filters][:by]]
params[:filters][:by]
filters[params[:filter][:by]]
filters
continue
results.offset
results.out_of_bounds?
results.previous_page
results.next_page.blank?
result.next_page.blank?
results.next_page
results.total_pages
results.total_entries
results = instance_variable_get("@#{self.class.name.split("::").last.gsub("Controller", '').downcase!}")
results = instance_variable_get("@#{self.class.name.split("::").last.gsub("Controller", '').downcase!}")results = instance_variable_get("@#{self.class.name.split("::").last.gsub("Controller", '').downcase!}")
continue
self.class.name.split("::").last
self.class.name.split("::")
self.class.name
self.class.name.split("::", "").last
self.class.name.split("::", "").last.gsub("Controller", '').downcase!
"@#{self.class.name.split("::", "").last.gsub("Controller", '').downcase!}"
"@#{self.class.name.split("::", "").gsub("Controller", '').downcase!}"
continue
exception.message
next
continue
 results = instance_variable_get("@physicians")
self.class.name.split("::").last.gsub("Controller", "").downcase!
self.class.name.split("::").last.gsub("Controller", "")
self.class.name.split("::")
self.class.name
self.class
 results = instance_variable_get("@#{self.class.name.gsub("Controller", '').downcase!}")
continue
results = instance_variable_get("@#{self.class.gsub("Controller", '').downcase!}")
continue
instance_variable_get("@physicians")
continue
exception.message
next
continue
exception.message
next
name
continue
exception.message
next
speciality_id
next
location_id
next
continue
Location.for_select
location
locations
continue
reponse_body
response_body
continue
response_body
continue
response_body
continue
response.body[:messages]
response.body["messages"]
response.body["message"]
response.body.message
response.body.messages
response.body
response
continue
response.format
response.content_type
response.body
response
response.body
continue
help
continue
params[:filters][:by]
params[:filters]
params
continue
params[:filter][:speciality_id]
